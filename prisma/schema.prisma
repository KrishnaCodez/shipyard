// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  clerkId           String?           @unique
  image             String            @default("")
  firstName         String            @default("")
  lastName          String            @default("")
  email             String            @unique
  username          String
  bio               String?           @db.VarChar(200)
  dob               DateTime?
  profilePictureURL String?
  personalDetails   PersonalDetails?
  technicalProfile  TechnicalProfile?
  // projectPreferences ProjectPreferences?
  role              Role              @default(USER)
  onboarded         Boolean           @default(false)
  notifications     Notification[]
  upvotes           Upvote[]
  products          Product[]
  comments          Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalDetails {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String      @unique
  university     String
  department     String
  degreeLevel    DegreeLevel
  phone          String?
  profilePicture String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model TechnicalProfile {
  id               String          @id @default(cuid())
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String          @unique
  primarySkills    String[]
  experienceLevel  ExperienceLevel
  interests        String[]
  preferredRoles   String[]
  githubUrl        String?
  linkedinUrl      String?
  portfolioUrl     String?
  toolsProficiency String[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// model ProjectPreferences {
//   id                    String    @id @default(cuid())
//   user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId                String    @unique
//   projectTypes          String[]
//   weeklyAvailability    String
//   teamSizePreference    String
//   collaborationMode     String[]
//   pastProjects          String?
//   competitionGoals      String?
//   availabilityStartDate DateTime?
//   createdAt             DateTime  @default(now())
//   updatedAt             DateTime  @updatedAt
// }

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] // Many-to-many relation with Product
}

model Product {
  id           String         @id @default(cuid())
  name         String
  slug         String         @unique
  headline     String
  rank         Int
  description  String
  logo         String
  releaseDate  String
  website      String
  twitter      String
  discord      String
  notification Notification[]
  comments     Comment[]
  upvotes      Upvote[]
  images       Image[]
  categories   Category[] // Many-to-many relation with Category
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  status       Status         @default(PENDING)

  @@index([userId])
  @@index([status])
}

model Image {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Upvote {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id             String   @id @default(cuid())
  profilePicture String
  productId      String
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  body           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id             String             @id @default(cuid())
  userId         String
  user           User               @relation(fields: [userId], references: [id])
  body           String
  profilePicture String
  productId      String
  commentId      String?
  product        Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  type           NotificationType
  status         NotificationStatus @default(UNREAD)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum NotificationType {
  UPVOTE
  COMMENT
  ACTIVATED
  REJECTED
}

enum DegreeLevel {
  UNDERGRADUATE
  GRADUATE
  PHD
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
