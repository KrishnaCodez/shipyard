// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  clerkId       String?        @unique
  image         String
  name          String
  email         String         @unique
  // password      String
  role          Role           @default(USER)
  onboarded     Boolean        @default(false)
  notifications Notification[]
  upvotes       Upvote[]
  products      Product[]
  comments      Comment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] // Many-to-many relation with Product
}

model Product {
  id           String         @id @default(cuid())
  name         String
  slug         String         @unique
  headline     String
  rank         Int
  description  String
  logo         String
  releaseDate  String
  website      String
  twitter      String
  discord      String
  notification Notification[]
  comments     Comment[]
  upvotes      Upvote[]
  images       Image[]
  categories   Category[] // Many-to-many relation with Category
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  status       Status         @default(PENDING)

  @@index([userId])
  @@index([status])
}

model Image {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Upvote {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id             String   @id @default(cuid())
  profilePicture String
  productId      String
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  body           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id             String             @id @default(cuid())
  userId         String
  user           User               @relation(fields: [userId], references: [id])
  body           String
  profilePicture String
  productId      String
  commentId      String?
  product        Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  type           NotificationType
  status         NotificationStatus @default(UNREAD)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum NotificationType {
  UPVOTE
  COMMENT
  ACTIVATED
  REJECTED
}
